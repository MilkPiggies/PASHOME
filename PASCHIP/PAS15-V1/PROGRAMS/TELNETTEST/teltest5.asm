//SPACE 
NOP $  0x00
NOP $  0x00
NOP $  0x00



//INITIALIZE
NOP $  0x00

    //SET_START_BRANCH
    NOP $  0x00
    LDX $# 0x00
    LDY $# 0x1B
    STX $# 0x0E
    STY $# 0x0F

    //SET_RETURN_BRANCH
    NOP $  0x00
    LDX $# 0x00
    LDY $# 0x38
    STX $# 0x10
    STY $# 0x11

    //SET_EXITKEY_BRANCH
    NOP $  0x00
    LDX $# 0x00
    LDY $# 0x9F
    STX $# 0x12
    STY $# 0x13

    //SET_ENDADDR_BRANCH
    NOP $  0x00
    LDX $# 0x00
    LDY $# 0x69
    STX $# 0x14
    STY $# 0x15


(                   X  and  Y )    
(set START branch ($0E and $0F))
(set RETURN branch ($10 and $11))
(set EXITKEY branch ($12 and $13))
(set ENDADDR branch ($14 and $15))



//SPACE
NOP $  0x00
NOP $  0x00
NOP $  0x00



//START
NOP $  0x00

    //SET $20 TO 0x30
    NOP $  0x00
    LDA $# 0x30
    STA $# 0x20

    //PRINT "READY: "
    NOP $  0x00

        //PRINT R
        NOP $  0x00
        LDX $# 0x52
        TELSEND $  0x00

        //PRINT E 
        NOP $  0x00
        LDX $# 0x45
        TELSEND $  0x00

        //PRINT A
        NOP $  0x00
        LDX $# 0x41
        TELSEND $  0x00
         
        //PRINT D
        NOP $  0x00
        LDX $# 0x44
        TELSEND $  0x00

        //PRINT Y
        NOP $  0x00
        LDX $# 0x59
        TELSEND $  0x00

        //PRINT :
        NOP $  0x00
        LDX $# 0x3A
        TELSEND $  0x00

        //PRINT ' '
        NOP $  0x00
        LDX $# 0x20
        TELSEND $  0x00



//SPACE
NOP $  0x00
NOP $  0x00
NOP $  0x00



//RETURN
NOP $  0x00
NOP $  0x00
NOP $  0x00
LDX $# 0x00
INT $  0x00

    //STORE $20 ON Z
    NOP $  0x00
    NOP $  0x00
    NOP $  0x00
    LDX $# 0x00
    LDY $  0x20
    LDZ $  0x00

    TELRECV $  0x00
    TELSEND $  0x00

    TGLZADDR $  0x00
    STX $  0x00
    TGLZADDR $  0x00



//CHECK_EXITKEY
NOP $  0x00

    //PUT $Z ON A
    TGLZADDR $  0x00
    LDA $  0x00
    TGLZADDR $  0x00

    //PUT "EXITKEY" ON B
    LDB $# 0x3D

    //COMPARE A AND B
    CMP $  0x00

    //SET BRANCH TO :EXITKEY
    (load x and load y, sbrk)
    LDX $  0x13
    LDY $  0x12
    SBRK $  0x00

    //BRANCH IF EQUAL
    NOP $  0x00
    BEQ $  0x00



//CHECK_ENDADDR
NOP $  0x00

    //PUT $20 ON A
    LDA $  0x20

    //PUT 0x36 ON B
    LDB $# 0x36

    //COMPARE A AND B
    CMP $  0x00

    //SET BRANCH TO :ENDADDR
    (load x and load y, sbrk)
    LDX $  0x15
    LDY $  0x14
    SBRK $  0x00

    //BRANCH IF EQUAL
    NOP $  0x00
    BEQ $  0x00



//NO_CHECK
NOP $  0x00

    //ADD 0x01 TO $20
    NOP $  0x00

        //LOAD $20 ON A
        LDA $  0x20

        //LOAD 0x01 ON B
        LDB $# 0x01

        //ADD A AND B
        ADD $  0x00

        //STORE A ON $20
        STA $# 0x20



    //BRANCH TO :RETURN
    NOP $  0x00

        //SET BRANCH TO :RETURN
        LDX $  0x11
        LDY $  0x10
        SBRK $  0x00

        //BRANCH TO :RETURN
        NOP $  0x00
        BR  $  0x00



//SPACE
NOP $  0x00
NOP $  0x00
NOP $  0x00



//ENDADDR
NOP $  0x00

(WRITE $30 to $4A)
LDA $  0x30
LDB $# 0x30
SUB $  0x00
STA $# 0x4A

(WRITE $35 to $45)
NOP $  0x00
LDA $  0x35
LDB $# 0x40
CMP $  0x00
LDX $# 0x00
LDY $# 0x02
SBRK $  0x00
BCS $  0x00
LDA $  0x35
LDB $# 0x30
SUB $  0x00
STA $# 0x45

(we would want to loop back here.)
NOP $  0x00
NOP $  0x00 <-
NOP $  0x00

(WRITE $36 to $46)
NOP $  0x00
LDA $  0x36
LDB $# 0x40
CMP $  0x00
LDX $# 0x50
LDY $# 0x02
SBRK $  0x00
BCS $  0x00
LDA $  0x36
LDB $# 0x30
SUB $  0x00
STA $# 0x46

(we would want to loop back here.)
NOP $  0x00
NOP $  0x00 <-
NOP $  0x00

(transform $45)
NOP $  0x00
LDA $  0x45
LDB $# 0x04
LSL $  0x00
STA $  0x45

(add $45 and $46 to make $4B)
LDA $  0x45
LDB $  0x46
ADD $  0x00
STA $  0x4B

(branch to finish the rest)
LDX $# 0x00
LDY $# 0x05
SBRK $  0x00
BR $  0x00

(loop back here after storing A,B, and C)
NOP $  0x00
NOP $  0x00 <-
NOP $  0x00

(NEWLINE, GOTO :START)
NOP $  0x00
LDX $# 0x0A
TELSEND $  0x00
NOP $  0x00
LDX $# 0x08
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
NOP $  0x00
LDX $  0x0F
LDY $  0x0E
SBRK $  0x00
NOP $  0x00
BR $  0x00



//SPACE 
NOP $  0x00
NOP $  0x00
NOP $  0x00



//EXITKEY
NOP $  0x00
(PRINT "DONE" ON NEWLINE AND STOP PROGRAM)
(RUN WHAT WAS WRITTEN ON MRAM)

LDX $# 0x0A
TELSEND $  0x00
NOP $  0x00
LDX $# 0x08
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00
TELSEND $  0x00



//SPACE
NOP $  0x00
NOP $  0x00
NOP $  0x00


    //SEND "DONE"
    NOP $  0x00

        //SEND D
        NOP $  0x00
        LDX $# 0x44
        TELSEND $  0x00

        //SEND O
        NOP $  0x00
        LDX $# 0x4F
        TELSEND $  0x00

        //SEND N
        NOP $  0x00
        LDX $# 0x4E
        TELSEND $  0x00

        //SEND E 
        NOP $  0x00
        LDX $# 0x45
        TELSEND $  0x00



//LOOP
NOP $  0x00

    //SPACE 
    NOP $  0x00
    NOP $  0x00
    NOP $  0x00

    //SET LOOP BRANCH
    NOP $  0x00
    LDX $# 0xBC
    LDY $# 0x00
    SBRK

    //BRANCH TO LOOP
    NOP $  0x00
    BR $  0x00
    NOP $  0x00

[285 LINE SPACE (to 0x200)] FILL WITH 0's 

(data is A-F so check which one)
(check if data is A(0x41))
NOP $  0x00
LDA $  0x35
LDB $# 0x41
CMP $  0x00
LDX $# 0x00
LDY $# 0x03
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
LDA $  0x35 
LDB $# 0x42
CMP $  0x00
LDX $# 0x10
LDY $# 0x03
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDA $  0x35
LDB $# 0x43
CMP $  0x00
LDX $# 0x20
LDY $# 0x03
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDA $  0x35
LDB $# 0x44
CMP $  0x00
LDX $# 0x30
LDY $# 0x03
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDA $  0x35
LDB $# 0x45
CMP $  0x00
LDX $# 0x40
LDY $# 0x03
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDA $  0x35
LDB $# 0x46
CMP $  0x00
LDX $# 0x50
LDY $# 0x03
SBRK $  0x00
BEQ $  0x00

(stop if above 0x46)
NOP $  0x00
LDX $# 0x00
INT $  0x00

[28 LINE SPACE (to 0x0250)] FILL WITH 0's

(data is A-F so check which one)
(check if data is A(0x41))
NOP $  0x00
LDA $  0x36
LDB $# 0x41
CMP $  0x00
LDX $# 0x00
LDY $# 0x04
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
LDA $  0x36
LDB $# 0x42
CMP $  0x00
LDX $# 0x10
LDY $# 0x04
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
LDA $  0x36
LDB $# 0x43
CMP $  0x00
LDX $# 0x20
LDY $# 0x04
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
LDA $  0x36
LDB $# 0x44
CMP $  0x00
LDX $# 0x30
LDY $# 0x04
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDA $  0x36
LDB $# 0x45
CMP $  0x00
LDX $# 0x40
LDY $# 0x04
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDA $  0x36
LDB $# 0x45
CMP $  0x00
LDX $# 0x50
LDY $# 0x04
SBRK $  0x00
BEQ $  0x00

[127 LINE SPACE (to 0x300)] FILL WITH 0's 

(data is A so write 0x0A on $45)
(and branch back to mid ENDADDR)
NOP $  0x00
LDA $# 0x0A
STA $  0x45
LDX $# 0x7E
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0310]

NOP $  0x00
LDA $# 0x0B
STA $  0x45
LDX $# 0x7E
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0320]

NOP $  0x00
LDA $# 0x0C
STA $  0x45
LDX $# 0x7E
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0330]

NOP $  0x00
LDA $# 0x0D
STA $  0x45
LDX $# 0x7E
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0340]

NOP $  0x00
LDA $# 0x0E
STA $  0x45
LDX $# 0x7E
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0350]

NOP $  0x00
LDA $# 0x0F
STA $  0x45
LDX $# 0x7E
LDY $# 0x00
SBRK $  0x00
BR $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
LDX $# 0x00
INT $  0x00
NOP $  0x00



[space to 0x0400 (155)]
(for $36)

NOP $  0x00
LDA $# 0x0A
STA $  0x46
LDX $# 0x8D
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0410]

NOP $  0x00
LDA $# 0x0B
STA $  0x46
LDX $# 0x8D
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0420]

NOP $  0x00
LDA $# 0x0C
STA $  0x46
LDX $# 0x8D
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0430]

NOP $  0x00
LDA $# 0x0D
STA $  0x46
LDX $# 0x8D
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0440]

NOP $  0x00
LDA $# 0x0E
STA $  0x46
LDX $# 0x8D
LDY $# 0x00
SBRK $  0x00
BR $  0x00

[space to 0x0450]

NOP $  0x00
LDA $# 0x0F
STA $  0x46
LDX $# 0x8D
LDY $# 0x00
SBRK $  0x00
BR $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
NOP $  0x00
LDX $# 0x00
INT $  0x00
NOP $  0x00



[140 LINE SPACE (to 0x500)] FILL WITH 0's 

NOP $  0x00
NOP $  0x00



(WRITE $31 to $41)
NOP $  0x00
LDA $  0x31
LDB $# 0x40
CMP $  0x00
LDX $# 0x00
LDY $# 0x06
SBRK $  0x00
BCS $  0x00
LDA $  0x31
LDB $# 0x30
SUB $  0x00
STA $# 0x41

NOP $  0x00
NOP $  0x00 <after writing >40 $41
NOP $  0x00

(WRITE $32 to $42)
NOP $  0x00
LDA $  0x32
LDB $# 0x40
CMP $  0x00
LDX $# 0x10
LDY $# 0x05
SBRK $  0x00
BCS $  0x00
LDA $  0x32
LDB $# 0x30
SUB $  0x00
STA $# 0x42

NOP $  0x00
NOP $  0x00 <after writing >40 $42
NOP $  0x00

(WRITE $33 to $43)
NOP $  0x00
LDA $  0x33
LDB $# 0x40
CMP $  0x00
LDX $# 0x20
LDY $# 0x05
SBRK $  0x00
BCS $  0x00
LDA $  0x33
LDB $# 0x30
SUB $  0x00
STA $# 0x43

NOP $  0x00
NOP $  0x00 <after writing >40 $43
NOP $  0x00

(WRITE $34 to $44)
NOP $  0x00
LDA $  0x34
LDB $# 0x40
CMP $  0x00
LDX $# 0x30
LDY $# 0x05
SBRK $  0x00
BCS $  0x00
LDA $  0x34
LDB $# 0x30
SUB $  0x00
STA $# 0x44

NOP $  0x00
LDX $# 0x00
INT $  0x00



(space to 0x600?)
NOP $  0x00
NOP $  0x00
NOP $  0x00

(branch if $31 > 0x40)
(check what char and branch to said char)
NOP $  0x00
LDA $  0x31
LDB $# 0x41
CMP $  0x00
LDX $# 0x00
LDY $# 0x09
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
NOP $  0x00
NOP $  0x00

NOP $  0x00
LDA $  0x31
LDB $# 0x42
CMP $  0x00
LDX $# 0x10
LDY $# 0x09 
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
NOP $  0x00
NOP $  0x00

NOP $  0x00
LDA $  0x31
LDB $# 0x43
CMP $  0x00
LDX $# 0x20
LDY $# 0x09 
SBRK $  0x00
BEQ $  0x00 

NOP $  0x00
NOP $  0x00
NOP $  0x00

NOP $  0x00
LDA $  0x31
LDB $# 0x44
CMP $  0x00
LDX $# 0x30
LDY $# 0x09
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
NOP $  0x00
NOP $  0x00

NOP $  0x00
LDA $  0x31
LDB $# 0x45
CMP $  0x00
LDX $# 0x40
LDY $# 0x09
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
NOP $  0x00
NOP $  0x00

NOP $  0x00
LDA $  0x31
LDB $# 0x46
CMP $  0x00
LDX $# 0x50
LDY $# 0x09
SBRK $  0x00
BEQ $  0x00

NOP $  0x00
LDX $# 0x00
INT $  0x00

NOP $  0x00
NOP $  0x00
NOP $  0x00



(branch if $32 > 0x40)
(check what char and branch to said char)
if = 41, goto 0x??
if = 42, goto 0x??
if = 43, goto 0x??
if = 44, goto 0x??
if = 45, goto 0x??
if = 46, goto 0x??


(branch if $33 > 0x40)
(check what char and branch to said char)
if = 41, goto 0x??
if = 42, goto 0x??
if = 43, goto 0x??
if = 44, goto 0x??
if = 45, goto 0x??
if = 46, goto 0x??


(branch if $34 > 0x40)
(check what char and branch to said char)
if = 41, goto 0x??
if = 42, goto 0x??
if = 43, goto 0x??
if = 44, goto 0x??
if = 45, goto 0x??
if = 46, goto 0x??


($31 char A)
NOP $  0x00
LDA $# 0x0A
STA $  0x41
LDX $# 0x0F
LDY $# 0x05
SBRK $  0x00
BR $  0x00

($31 char B)
NOP $  0x00
LDA $# 0x0B
STA $  0x41
LDX $# 0x0F
LDY $# 0x05
SBRK $  0x00
BR $  0x00

($31 char C)
NOP $  0x00
LDA $# 0x0C
STA $  0x41
LDX $# 0x0F
LDY $# 0x05
SBRK $  0x00
BR $  0x00

($31 char D)
NOP $  0x00
LDA $# 0x0D
STA $  0x41
LDX $# 0x0F
LDY $# 0x05
SBRK $  0x00
BR $  0x00

($31 char E)
NOP $  0x00
LDA $# 0x0E
STA $  0x41
LDX $# 0x0F
LDY $# 0x05
SBRK $  0x00
BR $  0x00

($31 char F)
NOP $  0x00
LDA $# 0x0F
STA $  0x41
LDX $# 0x0F
LDY $# 0x05
SBRK $  0x00
BR $  0x00